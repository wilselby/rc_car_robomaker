<!--
Software License Agreement (BSD)

\file      rover_monitor.launch
\authors   Wil Selby <accounts@wilselby.com>
\copyright Copyright (c) 2017, All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * The name of the contributors may not be used to endorse or promote products derived from this software 
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>
  <!-- 
        Include this file to enable CloudWatch monitoring of operational and health metrics. 
        Your robot will report metrics to CloudWatch Metrics and logs to CloudWatch Logs.
  -->

  <!-- Optional AWS region, if empty uses the config defaults -->
  <arg name="aws_region" value="us-east-2" doc="AWS region override, defaults to config .yaml if unset"/>

  <!-- Optional launch ID, if specified, used for suffixing resource names 
  <arg name="launch_id" value="launch_id" doc="Used for resource name suffix if specified"/>
  -->
  
  
  <!-- Report speed metrics to CloudWatch 
  <node pkg="cloudwatch_robot" type="monitor_speed.py" name="monitor_speed" output="log"/>
  -->
  
  <!-- Report distance to nearest obstacle metric to CloudWatch 
  <node pkg="cloudwatch_robot" type="monitor_obstacle_distance.py" name="monitor_obstacle_distance" output="log"/>
  -->
  
  <!-- Report distance to goal metric to CloudWatch (does nothing if there isn't a planned goal) 
  <node pkg="cloudwatch_robot" type="monitor_distance_to_goal.py" name="monitor_distance_to_goal" output="log"/>
  -->
  
  <!-- Report health Metrics -->
  <include file="$(find health_metric_collector)/launch/health_metric_collector.launch" >
    <arg name="config_file" value="$(find rover_monitor)/config/health_metrics_config.yaml" />
  </include>

  <!-- Enable CloudWatch Metrics reporting -->
  <arg name="metrics_node_name" value="cloudwatch_metrics_collector"/>
  <arg name="aws_metrics_namespace" default="robomaker_cloudwatch_monitoring"/>
  <include file="$(find cloudwatch_metrics_collector)/launch/cloudwatch_metrics_collector.launch" >
    <!-- The output argument sets the node's stdout/stderr location. Set to 'screen' to see this node's output in the terminal. -->
    <arg name="output" value="screen"/> <!-- log or screen -->
    <arg name="node_name" value="$(arg metrics_node_name)"/>
    <arg name="config_file" value="$(find rover_monitor)/config/cloudwatch_metrics_config.yaml"/>
  </include>
  <rosparam if="$(eval aws_region != '')" param="/$(arg metrics_node_name)/aws_client_configuration/region" subst_value="true">$(arg aws_region)</rosparam>
  <!-- <rosparam if="$(eval launch_id != '')" param="/$(arg metrics_node_name)/aws_metrics_namespace" subst_value="true">$(arg aws_metrics_namespace)-$(arg launch_id)</rosparam> -->
  

  <!-- Enable CloudWatch logging, send /rosout to CW Logs 
  <arg name="logger_node_name" value="cloudwatch_logger"/>
  <arg name="log_group_name" default="robomaker_cloudwatch_monitoring_example" />
  <include file="$(find cloudwatch_logger)/launch/cloudwatch_logger.launch">
    <arg name="output" value="screen"/>
    <arg name="node_name" value="$(arg logger_node_name)"/>
    <arg name="config_file" value="$(find cloudwatch_robot)/config/cloudwatch_logs_config.yaml" />
  </include>
  <rosparam if="$(eval aws_region != '')" param="/$(arg logger_node_name)/aws_client_configuration/region" subst_value="true">$(arg aws_region)</rosparam>
  <rosparam if="$(eval launch_id != '')" param="/$(arg logger_node_name)/log_group_name" subst_value="true">$(arg log_group_name)-$(arg launch_id)</rosparam>
  -->

</launch>